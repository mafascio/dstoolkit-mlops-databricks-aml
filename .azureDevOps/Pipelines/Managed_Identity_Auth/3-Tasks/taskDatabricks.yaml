parameters:
  azureSubscription:                  String
  SubscriptionId:                     String
  Environment:                        String
  ServiceReleased:                    String
  AZURE_DATABRICKS_APP_ID:            String
  enableRepoPull:                     Boolean
  branchName:                         String
  AuthenticationType:                 String
  MI_VMSS_NAME:                       String

steps:

- task:     UsePythonVersion@0
  inputs:
    versionSpec: '3.8'

#################################/
##  Dependencies/ Install                                              
#################################/
- bash: |
    $(buildPython.pythonLocation)\python -m pip install databricks-cli --upgrade
    sudo apt update && sudo apt install jq -y
    pip3 install requests
    pip3 install  azure-databricks-sdk-python
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

  displayName: Environment Set Up


#################################/
##  Git File Changes Check                                               
##################################/
- task:                               AzureCLI@2
  displayName:                        Check Infra Git Path Change
  name:                               "CheckInfraGitPathChange"
  inputs:
    scriptType:                       bash
    scriptLocation:                   scriptPath 
    azureSubscription:                ${{ parameters.azureSubscription }}
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsGitFileChanges.sh
    failOnStandardError:              false
  env:
    PATH_FILTER:                      '.azureDevOps/MLOps_Engineer/Infrastructure'
    VAR_NAME:                         'enableInfraDeploy'


#################################/
## Deploy Azure Infrastructure                                               
#################################/
- task:                               AzureCLI@2
  displayName:                        Deploy DBX CICD Azure Resources
  #condition:                          eq(variables['CheckInfraGitPathChange.enableInfraDeploy'], 'true')
  inputs:
    scriptType:                       bash
    scriptLocation:                   scriptPath
    azureSubscription:                ${{ parameters.azureSubscription }}
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsCreateAzureResources.sh
    failOnStandardError:              false
  enabled:                            true
  env:
    ENVIRONMENT:                      ${{ parameters.Environment }}


#################################/
##  Save Dynamically Generated Env Variable                                               
#################################/
- task:                               AzureCLI@2
  displayName:                        Set Env Variables  
  name:                               "DynamicEnvVariables"
  inputs:
    scriptType:                       bash
    scriptLocation:                   scriptPath 
    azureSubscription:                ${{ parameters.azureSubscription }}
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsSetEnvVariables.sh
    failOnStandardError:              false
  env:
    ENVIRONMENT:                      ${{ parameters.Environment }}


#################################/
##  Generate AAD Tokens                                              
#################################/
- bash: |
    az login --identity
    
    echo "Print VMSS Name (Ensure It Has Managed Identity Enabled With RBAC Assigned To Subscription)"
    echo $MI_VMSS_NAME

    MANAGED_IDENTITY=$( az ad sp list --display-name $MI_VMSS_NAME ) 
    MANAGED_IDENTITY_APP_ID=$( jq -r '.[].appId' <<< "$MANAGED_IDENTITY")  
    echo $MANAGED_IDENTITY_APP_ID

    
    DBRKS_BEARER_TOKEN=$( az account get-access-token \
                      --resource 2ff814a6-3304-4ab8-85cb-cd0e6f879c1d \
                      --query "accessToken" \
                      --output tsv)

    DBRKS_MANAGEMENT_TOKEN=$( az account get-access-token \
                            --resource "https://management.core.windows.net/" \
                            --query "accessToken" \
                            --output tsv)

    echo "##vso[task.setvariable variable="DBRKS_MANAGEMENT_TOKEN";isOutput=true;]$DBRKS_MANAGEMENT_TOKEN"
    echo "##vso[task.setvariable variable="DBRKS_BEARER_TOKEN";isOutput=true;]$DBRKS_BEARER_TOKEN"
    echo "##vso[task.setvariable variable="MANAGED_IDENTITY_APP_ID";isOutput=true;]$MANAGED_IDENTITY_APP_ID"
  
  displayName:  Generate AAD Tokens
  name:         "auth_tokens"
  env:  
    MI_VMSS_NAME: ${{ parameters.MI_VMSS_NAME }}


#################################/
##  RBAC Assignments                                           
#################################/
- task:                               AzureCLI@2
  displayName:                        RBAC Assignments
  inputs:
    scriptType:                       bash
    scriptLocation:                   scriptPath
    azureSubscription:                ${{ parameters.azureSubscription }}
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsCreateRoleBasedAccess.sh
    failOnStandardError:              true
  env:
    ENVIRONMENT:                      ${{ parameters.Environment }}
    RESOURCE_GROUP_NAME:              $(DynamicEnvVariables.RESOURCE_GROUP_NAME) 

#################################/
##  Generate Python Wheel Files                                            
#################################/
- script: |
    pip3 install wheel
    python setup.py sdist bdist_wheel
  workingDirectory:                   $(Build.SourcesDirectory)/Data_Scientist/pyWheels/Helper_Functions
  displayName:                        'Create Helper_Functions Package Wheel File'


#################################/
##  PAT Token                                           
#################################/
- task:                               AzureCLI@2
  displayName:                        'Create PAT Token'
  name:                               "create_pat_token"
  inputs:
    scriptType:                       bash
    scriptSource:                     scriptPath
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsCreateDatabricksToken.sh
    azureSubscription:                ${{ parameters.azureSubscription }}
  enabled:                            true
  env:  
    AZ_KEYVAULT_NAME:                 $(DynamicEnvVariables.AZ_KEYVAULT_NAME)
    DBRKS_BEARER_TOKEN:               $(auth_tokens.DBRKS_BEARER_TOKEN)
    DBRKS_MANAGEMENT_TOKEN:           $(auth_tokens.DBRKS_MANAGEMENT_TOKEN)
    WORKSPACE_ID:                     $(DynamicEnvVariables.WORKSPACE_ID)
    DATABRICKS_INSTANCE:              $(DynamicEnvVariables.DATABRICKS_INSTANCE)   
    RESOURCE_GROUP_NAME:              $(DynamicEnvVariables.RESOURCE_GROUP_NAME)


#################################/
##  Secret Scopes                                           
#################################/

- task:                               AzureCLI@2
  displayName:                        'Save Databricks SP Credentials Within Secret Scope'
  name:                               "secret_scope"
  inputs:
    scriptType:                       bash
    scriptSource:                     scriptPath
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsCreateSecretScopes.sh
    azureSubscription:                ${{ parameters.azureSubscription }}
  enabled:                            true
  env:
    DBRKS_BEARER_TOKEN:               $(auth_tokens.DBRKS_BEARER_TOKEN)
    DBRKS_MANAGEMENT_TOKEN:           $(auth_tokens.DBRKS_MANAGEMENT_TOKEN)
    WORKSPACE_ID:                     $(DynamicEnvVariables.WORKSPACE_ID)
    DATABRICKS_INSTANCE:              $(DynamicEnvVariables.DATABRICKS_INSTANCE)   
    RESOURCE_GROUP_NAME:              $(DynamicEnvVariables.RESOURCE_GROUP_NAME)
    SUBSCRIPTION_ID:                  $(DynamicEnvVariables.SUBSCRIPTION_ID)


#################################/
##  Create KV Secrets - Only Required for AML Integration                                      
#################################/

- task:                               AzureCLI@2
  displayName:                        'Key Vault Secrets'
  name:                               "key_vault_secrets"
  inputs:
    scriptType:                       bash
    scriptSource:                     scriptPath
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsCreateKeyVaultSecrets.sh
    azureSubscription:                ${{ parameters.azureSubscription }}
  enabled:                            true
  env:
    AZ_KEYVAULT_NAME:                 $(DynamicEnvVariables.AZ_KEYVAULT_NAME)
    ARM_CLIENT_ID:                    $(ARM_CLIENT_ID)
    ARM_CLIENT_SECRET:                $(ARM_CLIENT_SECRET)
    ARM_TENANT_ID:                    $(ARM_TENANT_ID)
    SUBSCRIPTION_ID:                  $(DynamicEnvVariables.SUBSCRIPTION_ID)


#################################/
##  Create Cluster                                           
#################################/
- task:                               PythonScript@0
  displayName:                        'Create DBX Clusters'
  name:                               "create_dbx_clusters"
  inputs:
    scriptSource:                     'filePath' 
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Python/utilsCreateCluster.py
  enabled:                            true
  env:    
    ENVIRONMENT:                      ${{ parameters.Environment }}
    DBRKS_BEARER_TOKEN:               $(auth_tokens.DBRKS_BEARER_TOKEN)
    DBRKS_MANAGEMENT_TOKEN:           $(auth_tokens.DBRKS_MANAGEMENT_TOKEN)
    WORKSPACE_ID:                     $(DynamicEnvVariables.WORKSPACE_ID)
    DATABRICKS_INSTANCE:              $(DynamicEnvVariables.DATABRICKS_INSTANCE)   
    RESOURCE_GROUP_NAME:              $(DynamicEnvVariables.RESOURCE_GROUP_NAME) 


#################################/
##  Git Config                                           
#################################/

- task:                               PythonScript@0
  displayName:                        'Git Config' 
  name:                               "git_configure"
  inputs:
    scriptSource:                     'filePath' 
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Python/utilsGitConfiguration.py
  env:
    SYSTEM_ACCESSTOKEN:               $(System.AccessToken)
    ENVIRONMENT:                      ${{ parameters.Environment }}
    DBRKS_BEARER_TOKEN:               $(auth_tokens.DBRKS_BEARER_TOKEN)
    DBRKS_MANAGEMENT_TOKEN:           $(auth_tokens.DBRKS_MANAGEMENT_TOKEN)
    WORKSPACE_ID:                     $(DynamicEnvVariables.WORKSPACE_ID)
    DATABRICKS_INSTANCE:              $(DynamicEnvVariables.DATABRICKS_INSTANCE)   


#################################/
##  Create Repos                                           
#################################/
- task:                                AzureCLI@2
  displayName:                        'Create Databricks Repo Folder'
  name:                               "dbx_repo_folders_create"
  inputs:
    scriptType:                       bash
    scriptSource:                     'filePath' 
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsCreateRepoFolder.sh
    azureSubscription:                ${{ parameters.azureSubscription }}
  enabled:                            true
  env:
    ROOT_USER_FOLDER:                 $(auth_tokens.MANAGED_IDENTITY_APP_ID)
    ENVIRONMENT:                      ${{ parameters.Environment }}
    DBRKS_BEARER_TOKEN:               $(auth_tokens.DBRKS_BEARER_TOKEN)
    DBRKS_MANAGEMENT_TOKEN:           $(auth_tokens.DBRKS_MANAGEMENT_TOKEN)
    WORKSPACE_ID:                     $(DynamicEnvVariables.WORKSPACE_ID)
    DATABRICKS_INSTANCE:              $(DynamicEnvVariables.DATABRICKS_INSTANCE)   


#################################/
##  Configure CLI                                           
#################################/
- task:                               AzureCLI@2
  displayName:                        'Install + Configure Databricks CLI'
  name:                               "databricks_cli_auth"
  inputs:
    scriptType:                       bash
    scriptSource:                     scriptPath
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsDatabricksCLIConfig.sh
    azureSubscription:                ${{ parameters.azureSubscription }}
  enabled:                            true
  env:  
    DATABRICKS_AAD_TOKEN:             $(auth_tokens.DBRKS_BEARER_TOKEN)
    DATABRICKS_HOST:                  $(DynamicEnvVariables.DATABRICKS_HOST)   


#################################/
##  DBX Deploy Jobs / Workflows                                           
#################################/
- bash: |
      echo $DATABRICKS_TOKEN
      pip install dbx

      dbx configure --enable-inplace-jinja-support

      dbx deploy --deployment-file DBX_Workflows/CICD_Deployments/DBX_Workflow_Deployments.yaml \
      MULTI_TASK -e $ENVIRONMENT --jinja-variables-file=DBX_Workflows/CICD_Deployments/DBX_Workflow_Parameters.yaml


  displayName:                        "Launch Jobs - DBX by Databricks Lab"
  env:
    ENVIRONMENT:                      ${{ parameters.Environment }}
    DATABRICKS_HOST:                  $(DynamicEnvVariables.DATABRICKS_HOST)   
    DATABRICKS_TOKEN:                 $(auth_tokens.DBRKS_BEARER_TOKEN)


#################################/
##  Repo Pull                                           
#################################/
- task:                                AzureCLI@2
  displayName:                        'Git Pull DBX Repo'
  name:                               "git_pull_dbx_repo"
  inputs:
    scriptType:                       bash
    scriptSource:                     'filePath' 
    scriptPath:                       $(Build.SourcesDirectory)/.azureDevOps/MLOps_Engineer/Utilities/Bash/utilsRepoPull.sh
    azureSubscription:                ${{ parameters.azureSubscription }}
  enabled:                            ${{ parameters.enableRepoPull }}
  env:
    ENVIRONMENT:                      ${{ parameters.Environment }}
    DBRKS_BEARER_TOKEN:               $(auth_tokens.DBRKS_BEARER_TOKEN)
    DBRKS_MANAGEMENT_TOKEN:           $(auth_tokens.DBRKS_MANAGEMENT_TOKEN)
    DATABRICKS_INSTANCE:              $(DynamicEnvVariables.DATABRICKS_INSTANCE)
    WORKSPACE_ID:                     $(DynamicEnvVariables.WORKSPACE_ID)
    PULL_BRANCH:                      ${{ parameters.branchName }}
    RELEASE_BRANCH:                   ${{ parameters.releaseBranch}}
